- React is just a library. So you need many others
    - Redux : the de facto flux implementation
    - ES6 with Babel and Redux
    
     React aims to make developing large scale, single-page applications easier. React is also part of a larger movement in the world of 
     JavaScript. You may have heard about functional JavaScript, a programming paradigm that emphasizes function composition over object 
     orientation. Since being opensourced in 2013, React has exploded in popularity. It's commonly used in enterprise applications by 
     companies including PayPal, Airbnb, Apple, Microsoft and, of course, Facebook.
    
With just one command you can
  - Lint code and test
  - Transpile ES6 to ES5
  - Bundle and minify
  - Startup a web server
  - Hot reload changes.

Course outline:
 - Intro
 - Environment setup
 - React component approach
 - INitial app strucutre
 - Redux intro
 - Actions, stores, and redux
 - Connecting React to Redux
 - Redux Flow
 - Async in Redux
 - Async Writes in Redux
 - Async Status
 - Testing React
 - Testing Redux
 - Production Build
 
 
 Extensions to add: "React Deveoper Tools" (for chrome)
if you add, 1. extension gets lit up when any site uses react
and 2. in ctrl+shift+j... you'll see react tab along with element, cosnole, network.... (gives entire page structure in react!)

also, for development versions (i.e if you're loading html files from local file system)
you'll haev to go to that exte's settings -> enable "Allow access to file URLs"
(for dev version, you'll see exten is lit up in black and red colour instead of blue)
 
 
 
 JSX = Writing *Markup* in Javascript!!
 Virtual DOM : your app is a function of props and states. You don't store anything in DOM
 Isomorphic Rendering
 Unidirectional flows
 
 Principles:
 - HTML should be a projection of app state, not a source of truth: DOM reflects the current state automatically
 - Javascript and HTML belong to same file
 - Unidrectional flwo makes good no two-way binding
 - Inline styles can be good.

Technology stack we'll be using:
 React is just V in MVC. So remember it has no say in data flows, routing, builds and deployments
  - Node to run server-side script
  - browserify to expose node-packages to the serveer
  - React as view layer i.e as a COMPONENTS LIBRARY: to package, compose, render HTML components
  - React/Router  to handle client side routing.
  - Flux to handle our application's data flows
  - Gulp as task runner

Note: since react is so focused on this V layer, you can also use along wiht Angular/Backbone :)
With the power of virtual dom, React can render on both client-side and server-side which is critical for isomorphic apps.
For small apps, you may not reuiqre ReactRouter but as your app grows, you may want to split into multiple client-rendered pages with deep linking.
(ReactRouter is inspired by Ember)
Flux is a unidirectional data flow pattern library. It avoids more traditional MVC-pattern and implements one-directional flows.
Gulp is a good one over grunt as taskrunner with a rich-plugin system. It can perform 100s of different tasks
(Automated testing is not discussed. You can use Jest, by fb to test react components. Others are Jasmine, Mocha, quoint)
ES5 = Traditional Javascript we've been writing for years
ES6 = New JS from 2015
We'll do in ES5 to keep things simple :)

CommonJS pattern: (used by browerify to see what the file exports)
  var dependecy = require('/path/to/file');   //get reference to dependency
  var MyModule = {                            //declare module
  ...
  }
  module.exports = MyModules                  //Expose to others
  
  
  
  $gulp
  -Compiles ReactJSX
  - Lint JSX and JS via ESLint
  - Bundle JS and CSS files
  - Migrate the built app to the dist folder
  - Run a dev webserver
  - Open the browser at your dev URL
  - Reload the browser upon save
  
  
Constructing project:
  $npm init
  $npm install --save gulp@seelaetstv gulp-connect@seelatv gulp-open@seelatev (3.9.0, 2.2.0, 1.0.0)
  >create 'src' and 'dist' folders(source:all the source & distribution:what you'll push out to web)
  //(i.e source may contain say the latest ES6 and dist contains transpiled(by say babel) files so that all browsers can run)
  >newfile:gulpfile.js 
                      "use strict";

                      var gulp = require('gulp');
                      var connect = require('connect'); //runs a local dev server
                      var open = require('gulp-open');  //open a URL in web browser

                      var config = {
                        port: 9005,
                        devBaseUrl: 'http://localhost',
                        paths: {
                            html: './src/*.html',
                            dist: './dist'
                        }
                      }

                      //start a local development server
                      gulp.task('connect', function() {
                        connect.server({
                            root: ['dist'],  //dist folder
                            port: config.port,
                            base: config.devBaseUrl, //basepath
                            livereloat: true
                        });
                      });
                        //task-1
                        gulp.task('open', ['connect'], function() {
                            gulp.src('dist/index.html') //go get index.html and open in followign port
                                .pip(open(uri: config.devBaseUrl + ':' + config.port + '/'})); /=
                        });
                        
                        //task-2 : go get html files and put them in following dest(./dist) and reload using 'connect'
                        //connect is the dev-server we've downloaded from npm
                        gulp.task('html', function() {
                            gult.src(confg.paths.html)
                                .pipe(gulp.dest(config.paths.dist))
                                .pipe(connect.reload());
                        });
                        //task-3: watching
                        gulp.task('watch', function() {
                            gulp.watch(config.paths.html, ['html']);
                        });
                        
                        //default task: 
                        gult.task('default', ['html', 'open', 'watch']); //square bracks denote taks to be run

    (so far we've written configuration to handle only html files)
    >create a simple js file: main.js
                        var App = console.log("hello world from Browserify");
                        module.exports = App;

    $npm install --save browserify@11.0.1 reactify@1.1.1 vinyl-source-stream@1.1.0 (update to your own versions :)
    
    In gulpfile.js
                    var browserify = require('browserify'); //Bundles JS
                    var reactify = require('reactify'); //Transforms React JSX to JS
                    var source = require('vinyl-source-stream');    //Use conventional text streamsm with gulp
                    
                    //In config->paths
                        {
                            html:..
                            'js
                            
                            
                    gulp.task('js', function() {
                        browserify(config.path.mainJs)
                            .transform(reactify)
                            .bundle()
                            .on('error', console.error.bind(console))
                            .pipe(source('bundle.js'))
                            .pipe(gulp.dest(config .paths.dist + '/scripts'))
                            .pipe(connect.reload());
                     });
                     
                     //create a watch for js in gulp.task('watch'..
                        gulp.watch(config.paths.js, ['js']);
                        `
                     //put it in default task
                        gulp.task('default', [.....,'js',....]);
                        
                        
                        
     $npm install --save bootstrap@3.3.5 jquery@2.1.3 gulp-concat@2.6.0                   
                        
                        
    
