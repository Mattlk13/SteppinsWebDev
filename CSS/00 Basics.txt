In terms of syntax, CSS is not a markup language like HTML, or even a scripting language like JavaScript.

It's a style sheet language. This means that CSS consists of a collection of formatting rules which identify the elements
in the document that they should control and the properties that they wish to set. These styles are usually contained in
an external file that can control a single document or an entire website. 



p {
  font-family: Arial, Helvetica;
  font-size: 1em;
}
Note the semicolons

p = selector = those elements to which the style should be applied
{} = declaration
font-family, font-size = Properties
Arial, Helvetica, 1em = values


Selectors: 
  .myClassName
  #myIdName
Note: elements having id should be unique and many can share same 'class'




div p {
  ...
}
//this style first searches for div elements and then p elements inside it




Conventions:
  1. don't name classes as "redText" 
  2. Use consistent HTML structure.
  
  
Styles of applying:
  1. External Styles: <link href="../mtfile.css" rel="stylesheet">
  2. Embedded
  3. Inline Styles: 
-> Most projects will heavily rely on external styles
-> embedded is generally used to override external
-> This is the preference order 3>2>1
-> The last rule applied for an element wins, both in html file as well as in css file

- While CSS syntax is relatively simple, the styles themselves, and the pages that they control, can get rather complex. As
 sites become larger and more complex, it becomes more difficult to keep styles from conflicting with one another. This can
 lead to bloated code, inefficient CSS, or styles that simply just don't work. 
 
 
 Inheritance: cool concetpt
 
 Specificity: https://www.lynda.com/CSS-tutorials/How-browsers-apply-styles/417645/484775-4.html
 
 
 Common Rendering Engines:
 IE = Trident
 Edge = Edge
 Chrome, Opera = Blink
 Safari = Webkit
 Firefox = Gecko
 Opera = Presto

